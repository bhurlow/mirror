{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name mirror.tools, :imports nil, :requires {util mirror.util, mirror.util mirror.util, r reagent.core, reagent.core reagent.core, reader cljs.reader, cljs.reader cljs.reader}, :uses nil, :defs {state-atom {:protocol-inline nil, :meta {:file "/Users/pretzel/code/mirror/src/mirror/tools.cljc", :line 7, :column 7, :end-line 7, :end-column 17, :arglists (quote ([data])), :doc "returns an instrumented atom used to represent\n  state"}, :name mirror.tools/state-atom, :variadic false, :file "/Users/pretzel/code/mirror/src/mirror/tools.cljc", :end-column 17, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data])), :doc "returns an instrumented atom used to represent\n  state"}, setup {:protocol-inline nil, :meta {:file "/Users/pretzel/code/mirror/src/mirror/tools.cljc", :line 18, :column 11, :end-line 18, :end-column 16, :private true, :arglists (quote ([state render-fn]))}, :private true, :name mirror.tools/setup, :variadic false, :file "/Users/pretzel/code/mirror/src/mirror/tools.cljc", :end-column 16, :method-params ([state render-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 18, :end-line 18, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state render-fn]))}, inject {:protocol-inline nil, :meta {:file "/Users/pretzel/code/mirror/src/mirror/tools.cljc", :line 31, :column 7, :end-line 31, :end-column 13, :arglists (quote ([state render-fn]))}, :name mirror.tools/inject, :variadic false, :file "/Users/pretzel/code/mirror/src/mirror/tools.cljc", :end-column 13, :method-params ([state render-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state render-fn]))}}, :require-macros {r reagent.core, reagent.core reagent.core}, :doc nil}